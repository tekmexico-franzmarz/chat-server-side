#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * SocketIO Configuration
 */

var io = require("socket.io")(server);

io.on("connection", function(socket) {
  console.log("A user connected");
  console.log("USER ID:", socket.handshake.query.userId);
  socket.join(socket.handshake.query.userId);
  socket.leave(socket.id);
  io
    .to(socket.handshake.query.userId)
    .emit("room-verification", socket.handshake.query.userId);
  socket.broadcast.emit(
    "userLoggedInAlert",
    `User ${socket.handshake.query.userId} has logged in.`
  );
  //socket.emit('msgFromServer', 'it works!');

  socket.on("disconnect", function() {
    console.log("A user disconnected");
    socket.broadcast.emit(
      "userLoggedOutAlert",
      `User ${socket.handshake.query.userId} has logged out.`
    );
  });

  socket.on("connectTo-room", data => {
    console.log("Connecting to room: ", data);
    socket.join(data);
    io.to(data).emit("room-verification", data);
  });
  socket.on("disconnectOf-room", data => {
    console.log("Disonnecting from room: ", data);
    socket.leave(data);
  });

  socket.on("msg-complete", data => {
    console.log("Data received by user: ", data.msg);
    socket.broadcast.to(data.chatroom).emit("user-message-incoming", data.msg);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
